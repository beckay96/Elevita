import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { isUnauthorizedError } from "@/lib/authUtils";
import NavigationHeader from "@/components/navigation-header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { FileText, Download, Share, Calendar, Clock } from "lucide-react";

export default function Reports() {
  const { toast } = useToast();
  const { isAuthenticated, isLoading } = useAuth();
  const [reportType, setReportType] = useState("summary");
  const [periodStart, setPeriodStart] = useState(() => {
    const date = new Date();
    date.setMonth(date.getMonth() - 1);
    return date.toISOString().split('T')[0];
  });
  const [periodEnd, setPeriodEnd] = useState(() => {
    return new Date().toISOString().split('T')[0];
  });

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Unauthorized",
        description: "You are logged out. Logging in again...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  const generateReport = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", "/api/reports/generate", {
        periodStart,
        periodEnd,
        reportType,
      });
      return await response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Success",
        description: "Health report generated successfully",
      });
      
      // Create a downloadable text file with the report
      const reportContent = `ELEVITA HEALTH REPORT
Generated: ${new Date().toLocaleDateString()}
Period: ${new Date(periodStart).toLocaleDateString()} - ${new Date(periodEnd).toLocaleDateString()}
Report Type: ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}

${data.content.summary}

---
This report was generated by Elevita for healthcare communication purposes.
This is not a medical diagnosis or treatment recommendation.
Always consult with qualified healthcare professionals for medical decisions.
`;

      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `elevita-health-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Error",
        description: "Failed to generate report",
        variant: "destructive",
      });
    },
  });

  const handleGenerateReport = () => {
    if (!periodStart || !periodEnd) {
      toast({
        title: "Error",
        description: "Please select both start and end dates",
        variant: "destructive",
      });
      return;
    }
    
    if (new Date(periodStart) > new Date(periodEnd)) {
      toast({
        title: "Error",
        description: "Start date must be before end date",
        variant: "destructive",
      });
      return;
    }
    
    generateReport.mutate();
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-elevita-black flex items-center justify-center">
        <div className="text-white">Loading...</div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="min-h-screen bg-elevita-black">
      <NavigationHeader />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Health Reports</h1>
          <p className="text-gray-300">Generate and export health summaries for your healthcare providers</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <Card className="bg-elevita-dark-gray/50 backdrop-blur-md border-elevita-medium-gray/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <FileText className="h-5 w-5 mr-2 text-elevita-bright-teal" />
                Generate New Report
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label htmlFor="reportType" className="text-white">Report Type</Label>
                <Select value={reportType} onValueChange={setReportType}>
                  <SelectTrigger className="bg-elevita-medium-gray/30 border-elevita-medium-gray/50 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-elevita-dark-gray border-elevita-medium-gray/20">
                    <SelectItem value="summary">Health Summary</SelectItem>
                    <SelectItem value="provider_handover">Provider Handover</SelectItem>
                    <SelectItem value="medication_report">Medication Report</SelectItem>
                    <SelectItem value="symptom_report">Symptom Report</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="periodStart" className="text-white">Start Date</Label>
                  <Input
                    id="periodStart"
                    type="date"
                    value={periodStart}
                    onChange={(e) => setPeriodStart(e.target.value)}
                    className="bg-elevita-medium-gray/30 border-elevita-medium-gray/50 text-white"
                  />
                </div>
                <div>
                  <Label htmlFor="periodEnd" className="text-white">End Date</Label>
                  <Input
                    id="periodEnd"
                    type="date"
                    value={periodEnd}
                    onChange={(e) => setPeriodEnd(e.target.value)}
                    className="bg-elevita-medium-gray/30 border-elevita-medium-gray/50 text-white"
                  />
                </div>
              </div>
              
              <Button 
                onClick={handleGenerateReport}
                disabled={generateReport.isPending}
                className="w-full bg-gradient-teal hover:opacity-90 text-white"
              >
                {generateReport.isPending ? (
                  <>
                    <Clock className="h-4 w-4 mr-2 animate-spin" />
                    Generating Report...
                  </>
                ) : (
                  <>
                    <FileText className="h-4 w-4 mr-2" />
                    Generate Report
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          <div className="space-y-6">
            <Card className="bg-elevita-dark-gray/50 backdrop-blur-md border-elevita-medium-gray/20">
              <CardHeader>
                <CardTitle className="text-white">Quick Export Options</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button className="w-full bg-elevita-medium-gray/30 hover:bg-elevita-teal/20 text-white justify-start">
                  <Download className="h-4 w-4 mr-2 text-elevita-bright-teal" />
                  Export Last 30 Days
                </Button>
                
                <Button className="w-full bg-elevita-medium-gray/30 hover:bg-elevita-purple/20 text-white justify-start">
                  <Share className="h-4 w-4 mr-2 text-elevita-light-purple" />
                  Share with Provider
                </Button>
                
                <Button className="w-full bg-elevita-medium-gray/30 hover:bg-elevita-teal/20 text-white justify-start">
                  <Calendar className="h-4 w-4 mr-2 text-elevita-bright-teal" />
                  Monthly Summary
                </Button>
              </CardContent>
            </Card>

            <Card className="bg-elevita-dark-gray/50 backdrop-blur-md border-elevita-medium-gray/20">
              <CardHeader>
                <CardTitle className="text-white">Report Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm text-gray-300">
                  <div>
                    <strong className="text-elevita-bright-teal">Health Summary:</strong> 
                    <span className="ml-2">Comprehensive overview of your health data including medications, symptoms, and appointments.</span>
                  </div>
                  <div>
                    <strong className="text-elevita-light-purple">Provider Handover:</strong> 
                    <span className="ml-2">Professional summary formatted for healthcare providers with clinical insights.</span>
                  </div>
                  <div>
                    <strong className="text-elevita-bright-teal">Medication Report:</strong> 
                    <span className="ml-2">Detailed medication adherence and management summary.</span>
                  </div>
                  <div>
                    <strong className="text-elevita-light-purple">Symptom Report:</strong> 
                    <span className="ml-2">Analysis of symptom patterns and trends over time.</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <Card className="mt-8 bg-elevita-dark-gray/50 backdrop-blur-md border-elevita-medium-gray/20">
          <CardContent className="py-6">
            <div className="text-center">
              <p className="text-elevita-bright-teal text-sm mb-2">
                <FileText className="inline h-4 w-4 mr-2" />
                <strong>Important Information</strong>
              </p>
              <p className="text-gray-400 text-xs max-w-4xl mx-auto">
                Reports generated by Elevita are for informational and communication purposes only. 
                They do not constitute medical advice, diagnosis, or treatment recommendations. 
                Always discuss these reports with your qualified healthcare professionals. 
                All data is formatted to facilitate better communication between you and your healthcare team.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
